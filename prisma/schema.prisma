// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Platforms {
  id                       String                     @id @default(uuid())
  name                     String
  subtitle                 String
  image                    String
  hourPrice                Float
  hours                    Float
  // price     Float  @default(dbgenerated("GENERATED ALWAYS AS (hours*hourPrice) STORED"))
  PlatformsFoundations     PlatformsFoundations[]
  PlatformsFunctionalities PlatformsFunctionalities[]
  PlatformOrders           PlatformOrders[]
}

model Categories {
  id          String        @id @default(uuid())
  name        String
  subtitle    String
  Foundations Foundations[]
}

model Foundations {
  id                   String                 @id @default(uuid())
  name                 String
  subtitle             String
  Category             Categories             @relation(fields: [categoryId], references: [id])
  categoryId           String
  PlatformsFoundations PlatformsFoundations[]
  FoundationOrders     FoundationOrders[]
}

model PlatformsFoundations {
  platformId   String
  foundationId String
  Foundation   Foundations @relation(fields: [foundationId], references: [id])
  Platform     Platforms   @relation(fields: [platformId], references: [id])
  hours        Float

  @@id([platformId, foundationId])
}

model PlatformsFunctionalities {
  platformId      String
  functionalityId String
  Functionality   Functionalities @relation(fields: [functionalityId], references: [id])
  Platform        Platforms       @relation(fields: [platformId], references: [id])
  hours           Float

  @@id([platformId, functionalityId])
}

model Functionalities {
  id                          String                        @id @default(uuid())
  name                        String
  subtitle                    String
  FunctionalitiesRequirements FunctionalitiesRequirements[]
  PlatformsFunctionalities    PlatformsFunctionalities[]
  FunctionalityOrders         FunctionalityOrders[]
}

model Requirements {
  id                          String                        @id @default(uuid())
  name                        String
  subtitle                    String
  FunctionalitiesRequirements FunctionalitiesRequirements[]
}

model FunctionalitiesRequirements {
  functionalityId String
  requirementId   String
  Functionality   Requirements    @relation(fields: [functionalityId], references: [id])
  Requirement     Functionalities @relation(fields: [requirementId], references: [id])

  @@id([functionalityId, requirementId])
}

model Orders {
  id                  String                @id @default(uuid())
  hours               Float
  cost                Float
  PlatformOrders      PlatformOrders[]
  FoundationOrders    FoundationOrders[]
  FunctionalityOrders FunctionalityOrders[]
}

model PlatformOrders {
  id         String    @id @default(uuid())
  platformId String
  orderId    String
  Platform   Platforms @relation(fields: [platformId], references: [id])
  Orders     Orders    @relation(fields: [orderId], references: [id])
}

model FoundationOrders {
  id           String      @id @default(uuid())
  foundationId String
  orderId      String
  Orders       Orders      @relation(fields: [orderId], references: [id])
  Foundations  Foundations @relation(fields: [foundationId], references: [id])
}

model FunctionalityOrders {
  id               String          @id @default(uuid())
  funcationalityId String
  orderId          String
  Orders           Orders          @relation(fields: [orderId], references: [id])
  Functionality    Functionalities @relation(fields: [funcationalityId], references: [id])
}
